#ifndef QUEST_TOKENS_H
#define QUEST_TOKENS_H

#define PUNCTUATOR(name, string)      T(name, string,     , 0)
#define PUNCTUAVAL(name, string, val) T(name, string, =val, 0)
#define KEY(name)                     T(name, #name,      , 1)
#define ALT(name, val, is_keyword)    T(name, #name,  =val, is_keyword)


/* punctuators */
PUNCTUAVAL(LBRACK,          "[",       '[')
PUNCTUAVAL(RBRACK,          "]",       ']')
PUNCTUAVAL(LPAREN,          "(",       '(')
PUNCTUAVAL(RPAREN,          ")",       ')')
PUNCTUAVAL(LCURLY,          "{",       '{')
PUNCTUAVAL(RCURLY,          "}",       '}')
PUNCTUAVAL(DOT,             ".",       '.')
PUNCTUAVAL(BITAND,          "&",       '&')
PUNCTUAVAL(ASTERISK,        "*",       '*')
PUNCTUAVAL(PLUS,            "+",       '+')
PUNCTUAVAL(MINUS,           "-",       '-')
PUNCTUAVAL(TILDE,           "~",       '~')
ALT(       COMPLIMENT,                 '~', 0)
PUNCTUAVAL(EXCLAMATIONMARK, "!",       '!')
ALT(       NOT,                        '!', 0)
PUNCTUAVAL(SLASH,           "/",       '/')
PUNCTUAVAL(PERCENT,         "%",       '%')
PUNCTUAVAL(LESS,            "<",       '<')
PUNCTUAVAL(GREATER,         ">",       '>')
PUNCTUAVAL(CARET,           "^",       '^')
ALT(       BITXOR,                        '^', 0)
PUNCTUAVAL(PIPE,            "|",       '|')
ALT(       BITOR,                         '|', 0)
PUNCTUAVAL(QUESTIONMARK,    "?",       '?')
PUNCTUAVAL(COLON,           ":",       ':')
PUNCTUAVAL(SEMICOLON,       ";",       ';')
PUNCTUAVAL(EQUAL,           "=",       '=')
PUNCTUAVAL(COMMA,           ",",       ',')
PUNCTUAVAL(HASH,            "#",       '#')
PUNCTUAVAL(NEWLINE,         "newline", '\n')

PUNCTUAVAL(PLUSPLUS,             "++", 256)
PUNCTUATOR(MINUSMINUS,           "--")
PUNCTUATOR(LESSLESS,             "<<")
PUNCTUATOR(GREATERGREATER,       ">>")
PUNCTUATOR(LESSEQUAL,            "<=")
PUNCTUATOR(GREATEREQUAL,         ">=")
PUNCTUATOR(EQUALEQUAL,           "==")
PUNCTUATOR(EXCLAMATIONMARKEQUAL, "!=")
ALT(       NOTEQUAL,                   TOK_EXCLAMATIONMARKEQUAL, 0)
PUNCTUATOR(ANDAND,               "&&")
ALT(       AND,                        TOK_ANDAND, 0)
PUNCTUATOR(PIPEPIPE,             "||")
ALT(       OR,                         TOK_PIPEPIPE, 0)
PUNCTUATOR(DOTDOTDOT,            "...")
PUNCTUATOR(ASTERISKEQUAL,        "*=")
PUNCTUATOR(SLASHEQUAL,           "/=")
PUNCTUATOR(PERCENTEQUAL,         "%=")
PUNCTUATOR(PLUSEQUAL,            "+=")
PUNCTUATOR(MINUSEQUAL,           "-=")
PUNCTUATOR(LESSLESSEQUAL,        "<<=")
PUNCTUATOR(GREATERGREATEREQUAL,  ">>=")
PUNCTUATOR(ANDEQUAL,             "&=")
PUNCTUATOR(CARETEQUAL,           "^=")
ALT(       XOREQUAL,                   TOK_CARETEQUAL, 0)
PUNCTUATOR(PIPEEQUAL,            "|=")
ALT(       OREQUAL,                    TOK_PIPEEQUAL, 0)


/* literals, misc */
T(EOF,                "end of input",       ,0)
T(IDENTIFIER,         "identifier",         ,0)
T(NUMBER,             "number constant",    ,0)
T(CHARACTER_CONSTANT, "character constant", ,0)
T(STRING_LITERAL,     "string literal",     ,0)
T(MACRO_PARAMETER,    "macro parameter",    ,0)
T(UNKNOWN_CHAR,       "character",          ,0)

/* keywords */
KEY(BREAK)
KEY(CASE)
KEY(CHAR)
KEY(CONST)
KEY(CONTINUE)
KEY(DEFAULT)
KEY(DO)
KEY(DOUBLE)
KEY(ELSE)
KEY(ENUM)
KEY(FLOAT)
KEY(FOR)
KEY(IF)
KEY(INT)
KEY(LONG)
KEY(RET)
KEY(SHORT)
KEY(SIGNED)
KEY(SIZEOF)
KEY(STATIC)
KEY(STRUCT)
KEY(SWITCH)
KEY(TYPEDEF)
KEY(UNION)
KEY(UNSIGNED)
KEY(VOID)
KEY(WHILE)

#endif