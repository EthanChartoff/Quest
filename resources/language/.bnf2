program ::= *statement;

statement ::=
  expression-statement |
  compound-statement |
  selection-statement |
  iteration-statement |
  jump-statement |
  labeled-statement;

expression-statement ::= expression ";" ;

expression ::=
  assignment-expression |
  expression "," assignment-expression;

assignment-expression ::=
  conditional-expression |
  unary-expression assignment-operator assignment-expression;

assignment-operator ::= "*" | "/" | "%" | "+" | "-" | "<<::=" | ">>::=" | "&::=" | "^::=" | "|::=";

unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!";

conditional-expression ::= logical-or-expression;

logical-or-expression ::=
  logical-and-expression |
  logical-or-expression "OR" logical-and-expression;

logical-and-expression ::=
  inclusive-or-expression |
  logical-and-expression "AND" inclusive-or-expression;

inclusive-or-expression ::=
  exclusive-or-expression |
  inclusive-or-expression "BITOR" exclusive-or-expression;

exclusive-or-expression ::=
  and-expression |
  exclusive-or-expression "BITXOR" and-expression;

and-expression ::=
  equality-expression |
  and-expression "BITAND" equality-expression;

equality-expression ::=
  relational-expression |
  equality-expression "::=::=" relational-expression |
  equality-expression "!::=" relational-expression;

relational-expression ::=
  shift-expression |
  relational-expression "<" shift-expression |
  relational-expression ">" shift-expression |
  relational-expression "<::=" shift-expression |
  relational-expression ">::=";

shift-expression ::=
  additive-expression |
  shift-expression "<<" additive-expression |
  shift-expression ">>" additive-expression;

additive-expression ::=
  multiplicative-expression |
  additive-expression "+" multiplicative-expression |
  additive-expression "-" multiplicative-expression;

multiplicative-expression ::=
  cast-expression |
  multiplicative-expression "*" cast-expression |
  multiplicative-expression "/" cast-expression |
  multiplicative-expression "%";

cast-expression ::=
  unary-expression |
  "(" type-specifier ")" cast-expression;

unary-expression ::=
  postfix-expression |
  unary-operator cast-expression;

postfix-expression ::=
  primary-expression |
  postfix-expression "[" expression "]" |
  postfix-expression "(" *assignment-expression ")";

primary-expression ::=
  identifier |
  constant |
  "(" expression ")";

identifier ::= IDENTIFIER;

constant ::= NUMBER_CONSTANT | CHAR_CONSTANT | STRING_LITERAL;

compound-statement ::=
  "{" *declaration *statement "}";

declaration ::=
  +declaration-specifier *(init-declarator) ";";

declaration-specifier ::= type-specifier | type-qualifier;

type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double";

type-qualifier ::= "const" | "signed" | "unsigned";

init-declarator ::= declarator | declarator "::=" initializer | type-qualifier init-declarator;

selection-statement ::=
  "if" "(" expression ")" statement |
  "if" "(" expression ")" statement "else" statement |
  "switch" "(" expression ")" statement;

iteration-statement ::=
  "while" "(" expression ")" statement |
  "do" statement "while" "(" expression ")" ";" |
  "for" "(" *expression ";" *expression ";" *expression ")" statement;

jump-statement ::= "continue" ";" | "break" ";" | "return" *expression ";";

labeled-statement ::= "CASE" constant-expression ":" statement;

declarator ::=
  identifier |
  "(" declarator ")" |
  declarator "[" constant-expression "]";

init-declarator-list ::=
  init-declarator |
  init-declarator ",";

initializer ::=
  assignment-expression |
  "{" initializer-list "}" |
  "{" initializer-list "," "}" ;

initializer-list ::=
  initializer |
  initializer-list "," initializer;

constant-expression ::= conditional-expression;