program ::= statement*

statement ::= expression-statement 
            | compound-statement 
            | selection-statement 
            | iteration-statement 
            | jump-statement  
            | labeled-statement

expression-statement ::= expression "SEMICOLON"

expression ::= assignment-expression 
              | expression "COMMA" assignment-expression

assignment-expression ::= conditional-expression 
                        | unary-expression assignment-operator assignment-expression

assignment-operator ::= "EQUEL"
                      | "STAREQUEL"
                      | "SLASHEQUEL" 
                      | "PRECENTEQUEL"
                      | "PLUSEQUEL"
                      | "MINUSEQUEL"
                      | "SHIFTLEFTEQUEL"
                      | "SHIFTRIGHTEQUEL"
                      | "ANDEQUEL"
                      | "OREQUEL"
                      | "XOREQUEL"


unary-operator ::= "STAR" 
                  | "PLUS" 
                  | "MINUS" 
                  | "TILDE" 
                  | "NOT"

conditional-expression ::= logical-or-expression

logical-or-expression ::= logical-and-expression 
                        | logical-or-expression "OR" logical-and-expression

logical-and-expression ::= inclusive-or-expression 
                          | logical-and-expression "AND" inclusive-or-expression

inclusive-or-expression ::= exclusive-or-expression 
                          | inclusive-or-expression "BITOR" exclusive-or-expression

exclusive-or-expression ::= and-expression 
                          | exclusive-or-expression "BITXOR" and-expression

and-expression ::= equality-expression 
                  | and-expression "BITAND" equality-expression

equality-expression ::= relational-expression 
                      | equality-expression "EQUELEQUEL" relational-expression 
                      | equality-expression "NOTEQUEL" relational-expression

relational-expression ::= shift-expression 
                        | relational-expression "LESSER" shift-expression 
                        | relational-expression "GREATER" shift-expression 
                        | relational-expression "LESSEREQUEL" shift-expression 
                        | relational-expression "GREATEREQUEL"

shift-expression ::= additive-expression 
                    | shift-expression "SHIFTLEFT" additive-expression 
                    | shift-expression "SHIFTRIGHT" additive-expression

additive-expression ::= multiplicative-expression 
                      | additive-expression "PLUS" multiplicative-expression 
                      | additive-expression "MINUS" multiplicative-expression

multiplicative-expression ::= cast-expression 
                            | multiplicative-expression "STAR" cast-expression 
                            | multiplicative-expression "SLASH" cast-expression 
                            | multiplicative-expression "PRECENT"

cast-expression ::= unary-expression 
                  | "LPAREN" type-specifier "RPAREN" cast-expression

unary-expression ::= postfix-expression 
                    | unary-operator cast-expression

postfix-expression ::= primary-expression 
                      | postfix-expression "LBRACK" expression "RBRACK" 
                      | postfix-expression "LPAREN" (assignment-expression)* "RPAREN"

primary-expression ::= identifier 
                      | constant 
                      | "LPAREN" expression "RPAREN"

identifier ::= "IDENTIFIER"

constant ::= "NUMBER_CONSTANT" 
            | "CHAR_CONSTANT" 
            | "STRING_LITERAL"

compound-statement ::= "LBRACE" declaration* statement* "RBRACE"

declaration ::= declaration-specifier+ (init-declarator)* "SEMICOLON"

declaration-specifier ::= type-specifier 
                        | type-qualifier

type-specifier ::= "VOID" 
                  | "CHAR" 
                  | "SHORT" 
                  | "INT" 
                  | "LONG" 
                  | "FLOAT" 
                  | "DOUBLE"

type-qualifier ::= "CONST" 
                  | "SIGNED" 
                  | "UNSIGNED"

init-declarator ::= declarator 
                  | declarator "EQUEL" initializer 
                  | type-qualifier init-declarator

selection-statement ::= "IF" "LPAREN" expression "RPAREN" statement 
                      | "IF" "LPAREN" expression "RPAREN" statement "ELSE" statement 
                      | "SWITCH" "LPAREN" expression "RPAREN" statement

iteration-statement ::= "WHILE" "LPAREN" expression "RPAREN" statement 
                      | "DO" statement "WHILE" "LPAREN" expression "RPAREN" "SEMICOLON" 
                      | "FOR" "LPAREN" expression* "SEMICOLON" expression* "SEMICOLON" expression* "RPAREN" statement

jump-statement ::= "CONTINUE" "SEMICOLON" | "break" "SEMICOLON" | "RET" expression* "SEMICOLON"

labeled-statement ::= "CASE" constant-expression ":" statement

declarator ::= identifier 
              | "LPAREN" declarator "RPAREN" 
              | declarator "LBRACK" constant-expression "RBRACK"

init-declarator-list ::= init-declarator 
                        | init-declarator ","

initializer ::= assignment-expression 
              | "LBRACE" initializer-list "RBRACE" 
              | "LBRACE" initializer-list "COMMA" "RBRACE" 

initializer-list ::= initializer 
                    | initializer-list "COMMA" initializer

constant-expression ::= conditional-expression