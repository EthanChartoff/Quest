program ::= statement-list

statement-list 
              ::= statement
                | statement statement-list

/* the different kinds of statements in quest */
statement   
         ::= expression-statement
           | compound-statement
           | selection-statement
           | iteration-statement
           | jump-statement
           | labeled-statement
		   | declaration

expression-statement ::= constant-expression 'SEMICOLON'

/* define order of precedence for different expressions types */
constant-expression ::= conditional-expression

conditional-expression ::= logical-or-expression
                           | logical-or-expression '?' expression ':' conditional-expression

logical-or-expression ::= logical-and-expression
                          | logical-or-expression '||' logical-and-expression

logical-and-expression ::= inclusive-or-expression
                           | logical-and-expression '&&' inclusive-or-expression

inclusive-or-expression ::= exclusive-or-expression
                            | inclusive-or-expression '|' exclusive-or-expression

exclusive-or-expression ::= and-expression
                            | exclusive-or-expression '^' and-expression

and-expression ::= equality-expression
                   | and-expression '&' equality-expression

equality-expression ::= relational-expression
                        | equality-expression '==' relational-expression
                        | equality-expression '!=' relational-expression

relational-expression ::= shift-expression
                          | relational-expression '<' shift-expression
                          | relational-expression '>' shift-expression
                          | relational-expression '<=' shift-expression
                          | relational-expression '>=' shift-expression

shift-expression ::= additive-expression
                     | shift-expression '<<' additive-expression
                     | shift-expression '>>' additive-expression

additive-expression ::= multiplicative-expression
                        | additive-expression '+' multiplicative-expression
                        | additive-expression '-' multiplicative-expression

multiplicative-expression ::= unary-expression
                              | multiplicative-expression '*' unary-expression
                              | multiplicative-expression '/' unary-expression
                              | multiplicative-expression '%' unary-expression

unary-expression ::= postfix-expression
					| '++' unary-expression
					| '--' unary-expression
					| unary-operator unary-expression

postfix-expression ::= assignment-expression
                       | postfix-expression '++'
                       | postfix-expression '--'

assignment-expression ::= primary-expression
						 | assignment-expression assignment-operator primary-expression	

primary-expression ::= identifier
                       | constant
                       | string
                       | '(' expression ')'

expression ::= constant-expression


assignment-operator ::= '='
                        | '*='
                        | '/='
                        | '%='
                        | '+='
                        | '-='
                        | '<<='
                        | '>>='
                        | '&='
                        | '^='
                        | '|='

unary-operator ::=   '+'
                   | '-'
                   | '~'
                   | '!'

compound-statement ::= '{' statement-list '}'

selection-statement ::= 'IF' '(' expression ')' statement
						| 'IF' '(' expression ')' statement 'ELSE' statement
						| 'SWITCH' '(' expression ')' statement

iteration-statement ::= 'WHILE' '(' expression ')' statement
						| 'DO' statement 'WHILE' '(' expression ')' ';'
						
jump-statement ::= 'CONTINUE' ';'
				   | 'BREAK' ';'
				   | 'RET' expression ';'

labeled-statement ::= 'CASE' constant-expression ':' statement
					 | 'DEFAULT' ':' statement

declaration ::= type-qualifier type-specifier '=' constant-expression ';'

type-qualifier ::= 'CONST'

type-specifier ::= 'VOID'
				  | 'CHAR'
				  | 'SHORT'
				  | 'INT'
				  | 'LONG'
				  | 'FLOAT'
				  | 'DOUBLE'
				  | 'SIGNED'
				  | 'UNSIGNED'

