set_T *syms = set_init(symbol_cmp_generic);

symbol_T *start = init_symbol_non_terminal(init_non_terminal("S'", NON_TERM_start));
symbol_T *labeled_statement = init_symbol_non_terminal(init_non_terminal("labeled_statement", NON_TERM_labeled_statement));
symbol_T *iteration_statement = init_symbol_non_terminal(init_non_terminal("iteration_statement", NON_TERM_iteration_statement));
symbol_T *selection_statement = init_symbol_non_terminal(init_non_terminal("selection_statement", NON_TERM_selection_statement));
symbol_T *compound_statement = init_symbol_non_terminal(init_non_terminal("compound_statement", NON_TERM_compound_statement));
symbol_T *unary_operator = init_symbol_non_terminal(init_non_terminal("unary_operator", NON_TERM_unary_operator));
symbol_T *assignment_operator = init_symbol_non_terminal(init_non_terminal("assignment_operator", NON_TERM_assignment_operator));
symbol_T *expression = init_symbol_non_terminal(init_non_terminal("expression", NON_TERM_expression));
symbol_T *primary_expression = init_symbol_non_terminal(init_non_terminal("primary_expression", NON_TERM_primary_expression));
symbol_T *assignment_expression = init_symbol_non_terminal(init_non_terminal("assignment_expression", NON_TERM_assignment_expression));
symbol_T *postfix_expression = init_symbol_non_terminal(init_non_terminal("postfix_expression", NON_TERM_postfix_expression));
symbol_T *unary_expression = init_symbol_non_terminal(init_non_terminal("unary_expression", NON_TERM_unary_expression));
symbol_T *multiplicative_expression = init_symbol_non_terminal(init_non_terminal("multiplicative_expression", NON_TERM_multiplicative_expression));
symbol_T *additive_expression = init_symbol_non_terminal(init_non_terminal("additive_expression", NON_TERM_additive_expression));
symbol_T *shift_expression = init_symbol_non_terminal(init_non_terminal("shift_expression", NON_TERM_shift_expression));
symbol_T *relational_expression = init_symbol_non_terminal(init_non_terminal("relational_expression", NON_TERM_relational_expression));
symbol_T *equality_expression = init_symbol_non_terminal(init_non_terminal("equality_expression", NON_TERM_equality_expression));
symbol_T *and_expression = init_symbol_non_terminal(init_non_terminal("and_expression", NON_TERM_and_expression));
symbol_T *exclusive_or_expression = init_symbol_non_terminal(init_non_terminal("exclusive_or_expression", NON_TERM_exclusive_or_expression));
symbol_T *inclusive_or_expression = init_symbol_non_terminal(init_non_terminal("inclusive_or_expression", NON_TERM_inclusive_or_expression));
symbol_T *logical_and_expression = init_symbol_non_terminal(init_non_terminal("logical_and_expression", NON_TERM_logical_and_expression));
symbol_T *logical_or_expression = init_symbol_non_terminal(init_non_terminal("logical_or_expression", NON_TERM_logical_or_expression));
symbol_T *constant_expression = init_symbol_non_terminal(init_non_terminal("constant_expression", NON_TERM_constant_expression));
symbol_T *expression_statement = init_symbol_non_terminal(init_non_terminal("expression_statement", NON_TERM_expression_statement));
symbol_T *parameter_list = init_symbol_non_terminal(init_non_terminal("parameter_list", NON_TERM_parameter_list));
symbol_T *function_definition = init_symbol_non_terminal(init_non_terminal("function_definition", NON_TERM_function_definition));
symbol_T *type_specifier = init_symbol_non_terminal(init_non_terminal("type_specifier", NON_TERM_type_specifier));
symbol_T *declaration = init_symbol_non_terminal(init_non_terminal("declaration", NON_TERM_declaration));
symbol_T *statement = init_symbol_non_terminal(init_non_terminal("statement", NON_TERM_statement));
symbol_T *statement_list = init_symbol_non_terminal(init_non_terminal("statement_list", NON_TERM_statement_list));
symbol_T *program = init_symbol_non_terminal(init_non_terminal("program", NON_TERM_program));

set_add(syms, start);
set_add(syms, labeled_statement);
set_add(syms, iteration_statement);
set_add(syms, selection_statement);
set_add(syms, compound_statement);
set_add(syms, unary_operator);
set_add(syms, assignment_operator);
set_add(syms, expression);
set_add(syms, primary_expression);
set_add(syms, assignment_expression);
set_add(syms, postfix_expression);
set_add(syms, unary_expression);
set_add(syms, multiplicative_expression);
set_add(syms, additive_expression);
set_add(syms, shift_expression);
set_add(syms, relational_expression);
set_add(syms, equality_expression);
set_add(syms, and_expression);
set_add(syms, exclusive_or_expression);
set_add(syms, inclusive_or_expression);
set_add(syms, logical_and_expression);
set_add(syms, logical_or_expression);
set_add(syms, constant_expression);
set_add(syms, expression_statement);
set_add(syms, parameter_list);
set_add(syms, function_definition);
set_add(syms, type_specifier);
set_add(syms, declaration);
set_add(syms, statement);
set_add(syms, statement_list);
set_add(syms, program);
